pgadmin:
-------
https://www.pgadmin.org/
https://www.pgadmin.org/download/pgadmin-4-macos/

psql install:
------------
https://www.timescale.com/blog/how-to-install-psql-on-mac-ubuntu-debian-windows/
https://dba.stackexchange.com/questions/3005/how-to-run-psql-on-mac-os-x
https://stackoverflow.com/questions/44654216/correct-way-to-install-psql-without-full-postgres-on-macos

brew install libpq
brew info libpq
echo 'export PATH="/opt/homebrew/opt/libpq/bin:$PATH"' >> ~/.zshrc
brew info libpq
which psql

==============================================
Postgres install:
----------------
https://www.postgresql.org/download/macosx/
brew install postgresql

This formula has created a default database cluster with:
  initdb --locale=C -E UTF-8 /opt/homebrew/var/postgres
For more details, read:
  https://www.postgresql.org/docs/14/app-initdb.html

To restart postgresql after an upgrade:
  brew services restart postgresql

brew services stop postgresql

==================================================
Setup and configure postgres with psql:
----------------------------------------
https://www.sqlshack.com/setting-up-a-postgresql-database-on-mac/
https://www.sqlshack.com/setting-up-a-postgresql-database-on-mac/
https://www.postgresqltutorial.com/postgresql-cheat-sheet/
https://www.postgresqltutorial.com/
https://kb.objectrocket.com/postgresql/how-to-run-an-sql-file-in-postgres-846#:~:text=The%20%5Ci%20command%20can%20aslo,%2C%20with%20the%20%5Cc%20command.
https://www.postgresqltutorial.com/psql-commands/ 
https://gpdb.docs.pivotal.io/archive/gs/43/pdf/PSQLQuickRef.pdf
https://quickref.me/postgres


psql postgres
postgres=# CREATE ROLE kkd WITH LOGIN PASSWORD 'kkd';
postgres=# ALTER ROLE kkd CREATEDB;
postgres=# \q
psql postgres -U kkd
postgres=# \l
postgres=# \c postgres
You are now connected to database "postgres" as user "kkd".
postgres=# \du
postgres=# \dt
Did not find any relations.

postgres=# CREATE TABLE IF NOT EXISTS test_table(
postgres(# pk SERIAL PRIMARY KEY,
postgres(# c1 INT NOT NULL,
postgres(# c2 INT NOT NULL);
CREATE TABLE

postgres=# \dt                                                                                                                                     List of relations
 Schema |    Name    | Type  | Owner 
--------+------------+-------+-------
 public | test_table | table | kkd
(1 row)

postgres=# ALTER TABLE test_table ADD COLUMN c3 FLOAT;
ALTER TABLE

postgres=# \d+ test_table
                                                           Table "public.test_table"
 Column |       Type       | Collation | Nullable |                Default                 | Storage | Compression | Stats target | Description 
--------+------------------+-----------+----------+----------------------------------------+---------+-------------+--------------+-------------
 pk     | integer          |           | not null | nextval('test_table_pk_seq'::regclass) | plain   |             |              | 
 c1     | integer          |           | not null |                                        | plain   |             |              | 
 c2     | integer          |           | not null |                                        | plain   |             |              | 
 c3     | double precision |           |          |                                        | plain   |             |              | 
Indexes:
    "test_table_pkey" PRIMARY KEY, btree (pk)
Access method: heap

postgres=# INSERT INTO test_table (pk, c1, c2, c3)   VALUES (0, 99,100, 1.0), (1, 199, 1100, 11.0) ;
INSERT 0 2
postgres=# 
postgres=# SELECT * FROM test_table;
 pk | c1  |  c2  | c3 
----+-----+------+----
  0 |  99 |  100 |  1
  1 | 199 | 1100 | 11
(2 rows)

postgres=# 
postgres=# SELECT count(*) FROM test_table;
 count 
-------
     2
(1 row)

postgres=# INSERT INTO test_table (pk, c1, c2, c3)   VALUES (2, 999,1100, 11.0), (3, 9199, 91100, 911.0) ;

postgres=# SELECT * FROM test_table;
 pk |  c1  |  c2   | c3  
----+------+-------+-----
  0 |   99 |   100 |   1
  1 |  199 |  1100 |  11
  2 |  999 |  1100 |  11
  3 | 9199 | 91100 | 911
(4 rows)

postgres=# SELECT c2, count(c3) AS countc3 FROM test_table GROUP BY c2;
  c2   | countc3 
-------+---------
  1100 |       2
   100 |       1
 91100 |       1
(3 rows) 
